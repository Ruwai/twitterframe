'''	Was going to add this to the twitter_methods.py but this will just be cleaner.	Might make it more efficient...	From what I know about this StreamListener class is that it is required that	create a subclass that inherits the methods from tweepy.StreamListener.	The source code for StreamListener can be found here:	https://github.com/tweepy/tweepy/blob/master/tweepy/streaming.py#L31	From there we make our actual methods that route to our commands with	the class Stream() that has a ton of stuff in the init...	https://github.com/tweepy/tweepy/blob/master/tweepy/streaming.py#L190'''from . import utilsimport tweepyimport osimport pathlib as Pathimport jsonimport csvimport sqlite3from Queue import Queue, Emptyfrom threading import Thread, EventQUEUE_S_TIMEOUT = 1API_S_RETRY = 60API_S_RETRY_DELAY = 1API_RETRY_ERR = [400,401,500,502,503,504]class StreamListener(tweepy.StreamListener):    '''    Stream Listener class.    '''    def __init__(self, user_id, callback):      self.user_id = user_id      self.callback = callback      self.error_status = None      self.start_queue()    def start_queue(self):      '''        Creates a queue and starts the worker threads.      '''      self.queue = Queue()      self.stop_event = Event()      self.worker = Thread(target=self.process_queue)      self.worker.daemon = True      self.worker.start()    def stop_queue(self):      '''        Shuts down the queue and worker threads.      '''      if self.queue:        print('Stopping queue.')        self.queue.join()      else:        print('No queue to stop.')      print('Stopping worker thread.')      self.stop_event.set()      self.worker.join()    def process_queue(self):      '''        Continuously processses tasks on the queue.      '''      while not self.stop_event.is_set():        try:          data = self.queue.get(block=True, timeout=)          self.handle_data(data)          self.queue.task_done()        except Empty:          continue        except Exception as e:          print(e)      print('Stopped worker thread.')    def on_status(self, status):      def on_error(self, status_code):        if status_code == 420:          return False      print(status.text)# global variablesstream_listener = StreamListener()class TwitterListener(stream_listener):    '''        Create a class that inherits StreamListener from tweepy.        Create a Stream object        Use api = self.setup() to set up authentication.        I guess the goal will be to also dump the tweets from each listening session        into an SQL database...        example code can be found here:        https://github.com/dataquestio/twitter-scrape/blob/master/scraper.py    '''    def __init__(self, consumer_key, consumer_secret,                 access_token, access_secret):      '''        init and inherit from StreamListener      '''      super(StreamListener, self).__init__()      self._auth = tweepy.OAuthHandler(consumer_key, consumer_secret)      self._auth.set_access_token(access_token, access_secret)    def set_endpoint(self, endpoint):    	'''    		Sets endpoints    	'''    	self.endpoint = endpoint    def use_filter(self, trackers=list()):      '''        Filter to track what you want to stream.      '''      api = self.setup()      stream = tweepy.Stream(auth=api, listener=StreamListener())      stream.filter(track=trackers)